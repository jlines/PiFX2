var color	= require('tinycolor2'),
    Pixel 	= require('./Pixel')

/**
 * Representation of a pixel strand in the form of a raw buffer
 * @param {number} num_pixels Number of pixels in the strand
 */
function PixelBuffer(num_pixels){
    this.buffer = [];
    this.pixelCount = num_pixels

    this.pixelData = [];
    this.colorData = {
        colorValue:0,
        deviceValue:0
    }

    for(i=0; i<256; i++) {
        this.pixelData[i] = {
            deviceValue:0x80 | Math.pow(i / 255.0, 2.5) * 127.0 + 0.5,
            colorValue:i
        };
    }
}

/**
 * Returns the buffer associated with the object
 * @return {Buffer} Buffer representing the pixel strand's raw data
 */
PixelBuffer.prototype.get = function() {

    var databuffer = [];
    for(i=0;i<this.buffer.length;i++) {
        databuffer[i] = this.buffer[i].deviceValue;
    }
    databuffer.push(0);
    databuffer.push(0);
    databuffer.push(0);
    databuffer.push(0);

    return new Buffer(databuffer);
}




/**
 * Get the Pixel object at the specified index
 * @param  {number} i Index of the Pixel to retrieve
 * @return {Pixel}    Pixel object at the specified index
 */
PixelBuffer.prototype.getPixel = function(i){
    return new Pixel(this.buffer[i * 3].colorValue,
        this.buffer[i * 3 + 1].colorValue,
        this.buffer[i * 3 + 2].colorValue)
}

/**
 * Set the RGB value of the pixel at the specified index
 * @param {number} i Index of the Pixel to set
 * @param {number} r Red value
 * @param {number} g Green value
 * @param {number} b Blue value
 */
PixelBuffer.prototype.setRGB = function(i, r, g, b){
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);


    if(r>255|g>255|b>255) {
        throw new Error("RGB Values must be between 0 and 255")
    }

    this.buffer[i * 3] = this.pixelData[r];
    this.buffer[i * 3 + 1] = this.pixelData[g];
    this.buffer[i * 3 + 2] = this.pixelData[b];
}

PixelBuffer.prototype.setColor = function(i, c) {
    this.setRGB(i, c.g, c.r, c.b);
}

PixelBuffer.prototype.fillColor = function(c) {
    this.fillRGB(c.g, c.r, c.b);
}

/**
 * Set the HSL value of the pixel at the specified index
 * @param {number} i Index of the Pixel to set
 * @param {number} h Hue value
 * @param {number} s Saturation value
 * @param {number} l Lightness value
 */
PixelBuffer.prototype.setHSL = function(i, h, s, l){
    var c = color({
        h: h,
        s: s,
        l: l
    }).toRgb()

    this.setRGB(
        i,

        c.r,
        c.g,
        c.b
    )
}

/**
 * Set the RGB values at the specified index through a Pixel object
 * @param {number} i     Index of the Pixel to set
 * @param {Pixel} pixel  Pixel to set at the specified index
 */
PixelBuffer.prototype.setPixel = function(i, pixel){
    var rgb = pixel.getRGB()
    this.setRGB(i, rgb.r,rgb.g,rgb.b);
}

/**
 * Fill the entire pixel strand with a specific RGB color
 * @param  {number} r Red value
 * @param  {number} g Green value
 * @param  {number} b Blue value
 */
PixelBuffer.prototype.fillRGB = function(r, g, b){
    this.fillRangeRGB(0, this.pixelCount, r, g, b)
}

/**
 * Fill a specific range of pixels with a specific color. The other pixels are
 * not modified.
 * @param  {number} start First pixel to change the color of
 * @param  {number} end   Last pixel to change the color of
 * @param  {number} r     Red value
 * @param  {number} g     Green value
 * @param  {number} b     Blue value
 */
PixelBuffer.prototype.fillRangeRGB = function(start, end, r, g, b){
    if(start < 0 || start > this.pixelCount
        || end < 0 || end < start || end > this.pixelCount){
        return; // You can't fill the pixels in that range
    }

    for(var i = start; i < end; i++){
        this.setRGB(i, r, g, b);
    }
}

/**
 * Multiply the RGB values provided onto the pixel buffer
 * @param  {number} r Red value
 * @param  {number} g Green value
 * @param  {number} b Blue value
 */
PixelBuffer.prototype.multiplyRGB = function(r, g, b){
    for(var i = 0; i < this.buffer.length; i += 3){
        this.buffer[i] = this.buffer[i] * r / 255
        this.buffer[i + 1] = this.buffer[i + 1] * g / 255
        this.buffer[i + 2] = this.buffer[i + 2] * b / 255
    }
}

/**
 * Turn the entire pixel strand off
 */
PixelBuffer.prototype.clear = function(){
    this.fillRGB(0, 0, 0)
}

module.exports = PixelBuffer